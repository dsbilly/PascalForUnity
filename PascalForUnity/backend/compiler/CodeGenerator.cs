using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PascalForUnity.Intermediate;
using PascalForUnity.Messages;
namespace PascalForUnity.Backends.Compiler
{
   /**
 * <h1>CodeGenerator</h1>
 *
 * <p>The code generator for a compiler back end.</p>
 *
 * <p>Copyright (c) 2009 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
public class CodeGenerator : Backend
{
    /**
     * Process the intermediate code and the symbol table generated by the
     * parser to generate machine-language instructions.
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws Exception if an error occurred.
     */
    public override void Process(ICode iCode, SymTab symTab)
    {
        DateTime startTime = System.DateTime.Now;// .currentTimeMillis();
        double elapsedTime = (System.DateTime.Now - startTime).TotalSeconds;
        int instructionCount = 0;

        // Send the compiler summary message.
        SendMessage(new Message(MessageType.COMPILER_SUMMARY,
                                new double[] {instructionCount,
                                              elapsedTime}));
    }
}
}
