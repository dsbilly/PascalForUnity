using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PascalForUnity.message;
using PascalForUnity.frontend;
using PascalForUnity.intermediate;
namespace PascalForUnity.backend
{
   /**
 * <h1>Backend</h1>
 *
 * <p>The framework class that represents the back end component.</p>
 *
 * <p>Copyright (c) 2009 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
public abstract class Backend : MessageProducer
{
    protected static MessageHandler messageHandler = new MessageHandler(); // message handler delegate

    //static {
    //    messageHandler = new MessageHandler();
    //}

    protected SymTab symTab;  // symbol table
    protected ICode iCode;    // intermediate code

    /**
     * Getter.
     * @return the intermediate code generated by this parser.
     */
    public ICode GetICode()
    {
        return iCode;
    }

    /**
     * Getter.
     * @return the symbol table generated by this parser.
     */
    public SymTab GetSymTab()
    {
        return symTab;
    }

    /**
     * Getter.
     * @return the message handler.
     */
    public MessageHandler GetMessageHandler()
    {
        return messageHandler;
    }

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser.  To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws Exception if an error occurred.
     */
    public abstract void Process(ICode iCode, SymTab symTab);
    

    /**
     * Notify listeners after setting the message.
     * @param message the message to set.
     */
    public void SendMessage(Message message)
    {
        messageHandler.SendMessage(message);
    }

    /**
     * Add a parser message listener.
     * @param listener the message listener to add.
     */
    public void AddMessageListener(MessageListener listener)
    {
        messageHandler.AddListener(listener);
    }

    /**
     * Remove a parser message listener.
     * @param listener the message listener to remove.
     */
    public void RemoveMessageListener(MessageListener listener)
    {
        messageHandler.RemoveListener(listener);
    }
}
}
