using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PascalForUnity.intermediate;
using PascalForUnity.message;
namespace PascalForUnity.backend.interpreter
{
    /**
 * <h1>Executor</h1>
 *
 * <p>The executor for an interpreter back end.</p>
 *
 * <p>Copyright (c) 2009 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
    public class Executor : Backend
    {
        /**
         * Process the intermediate code and the symbol table generated by the
         * parser to execute the source program.
         * @param iCode the intermediate code.
         * @param symTab the symbol table.
         * @throws Exception if an error occurred.
         */
        public override void Process(ICode iCode, SymTab symTab) {
            //long startTime = System.currentTimeMillis();
            //float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
            DateTime startTime = System.DateTime.Now;// .currentTimeMillis();
            double elapsedTime = (System.DateTime.Now - startTime).TotalSeconds;
            int executionCount = 0;
            int runtimeErrors = 0;

            // Send the interpreter summary message.
            SendMessage(new Message(MessageType.INTERPRETER_SUMMARY,
                                    new double[] {executionCount,
                                              runtimeErrors,
                                              elapsedTime}));
        }
    }
}
